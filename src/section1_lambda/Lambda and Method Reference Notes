ðŸ”· Temel SÃ¶z Dizimi:
(parametreler) -> ifade

// ya da Ã§oklu ifade iÃ§in
(parametreler) -> {
    // iÅŸlem 1
    // iÅŸlem 2
    return deÄŸer;
}

ðŸ”· Lambda'nÄ±n Arka PlanÄ±nda Ne Var?
- Derleme zamanÄ±nda, bir section1_lambda ifadesi invokedynamic bytecode komutu ile bir functional interface'e dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼r.

- Lambda'lar anonim iÃ§ sÄ±nÄ±flarÄ±n yerini alÄ±r, ama daha hafif ve performanslÄ±dÄ±r.

- this ifadesi, section1_lambda'nÄ±n tanÄ±mlandÄ±ÄŸÄ± dÄ±ÅŸ sÄ±nÄ±fÄ± iÅŸaret eder (anonim iÃ§ sÄ±nÄ±ftaki gibi section1_lambdaâ€™nÄ±n kendisini deÄŸil!).

ðŸ”· Method Reference TÃ¼rleri:
Lambda	                        Method Reference	    AÃ§Ä±klama
x -> x.toString()	            Object::toString	    instance method
() -> new ArrayList<>()	        ArrayList::new	        constructor reference
(x, y) -> x.compareTo(y)	    String::compareTo	    instance on param
x -> Class.staticMethod(x)	    Class::staticMethod	    static method reference